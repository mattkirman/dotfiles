set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" General
Bundle 'tpope/vim-surround'
Bundle 'SuperTab'
Bundle 'bling/vim-airline'

" Buffer management
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'ZoomWin'

" Syntax
Bundle 'scrooloose/syntastic'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-rails.git'
Bundle 'rodjek/vim-puppet'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'tpope/vim-markdown'
Bundle 'jnwhiteh/vim-golang'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'cespare/vim-toml'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc
set ttyfast
set laststatus=2
set clipboard=unnamed
set timeoutlen=500
set foldmethod=syntax
set nofoldenable

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Use modeline overrides
set modeline
set modelines=4

" Line numbers
set rnu
set ruler
set cursorline
syntax on

" Whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:·

" Re-assign the leader from '.' to ','
let mapleader = ","

" Make ';' do the same as ':'
nnoremap ; :

" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set showmatch
nnoremap <leader><space> :noh<cr>

" Text wrapping
set wrap
set textwidth=79
set formatoptions=qrn1

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Automatically include external file changes when the cursor moves
au CursorMoved * checktime
set autoread

" make and python use real tabs
au FileType make      set noexpandtab
au FileType python    set noexpandtab

" Default color scheme
set background=dark
color universe

set fillchars=vert:\│"

" Load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Disable arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Move by screen line, not file line
nnoremap j gj
nnoremap k gk

" Quick escapes
inoremap jj <Esc>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Indent code in normal mode
nnoremap < V<gv<Esc>
nnoremap > V>gv<Esc>

" Select all text in the current buffer
map <Leader>a ggVG

" Absolute line numbers in insert mode, relative numbers in others for easy movement
au InsertEnter * :set nu
au InsertLeave * :set rnu

" Split windows
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>W :split<CR><C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Session management
nnoremap <leader>s :mksession!<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

" Automatically restore session if a Session.vim exists
function! RestoreSession()
  if argc() == 0 && filereadable("Session.vim") " vim called without arguments
    execute 'source Session.vim'
  end
endfunction
autocmd VimEnter * call RestoreSession()

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
map <Leader>n :NERDTreeToggle<CR>

" CtrlP configuration
let g:ctrlp_match_window='order:ttb'
nmap <Leader>t :CtrlP<CR>
nmap <Leader>T :CtrlPClearCache<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir': 'vendor/ruby',
  \ }

" ZoomWin configuration
map <Leader>z :ZoomWin<CR>

" Airline config
let g:airline_powerline_fonts=1
set noshowmode

" Syntastic config
let g:syntastic_check_on_open=1
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Import ~/.vimrc.local
if filereadable("~/.vimrc.local")
  so ~/.vimrc.local
endif
